#!/bin/sh
# Copyright (c) 2020 askmeaboutloom
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e


die() {
    echo "$@" 2>&1
    exit 1
}

die_with_usage() {
    echo "Usage: $0 debug|release|emscripten" 2>&1
    exit 2
}


set_args() {
    varname="$1"
    shift
    while [ "$#" -gt 0 ]; do
        eval "$varname=\"\$$varname \$1\""
        shift
    done
}

cmake_common_args()  {
    set_args cmake_common_args "$@"

}

cmake_rouse_args()  {
    set_args cmake_rouse_args "$@"
}

cmake_rouse_lua_args()  {
    set_args cmake_rouse_lua_args "$@"
}


build_rouse() {
    cd "$base/rouse"
    eval "${cmake_configure_command:-cmake} -B \"\$builddir\" -G \"\${generator:-Ninja}\"$cmake_common_args$cmake_rouse_args"
    eval "${cmake_build_command:-cmake} --build \"\$builddir\""
}

build_rouse_lua() {
    cd "$base/rouse-lua"
    eval "${cmake_configure_command:-cmake} -B \"\$builddir\" -G \"\${generator:-Ninja}\" -DROUSE_EXPORT_FILE=\"../rouse/$builddir/Rouse.cmake\"$cmake_common_args$cmake_rouse_lua_args"
    eval "${cmake_build_command:-cmake} --build \"\$builddir\""
}

build_all() {
    set -x
    build_rouse
    build_rouse_lua
}


build_debug() {
    builddir='build'
    build_all
}


build_release() {
    builddir='buildrelease'

    cmake_common_args '-DCMAKE_BUILD_TYPE=Release' \
                      '-DUSE_ASAN=OFF' \
                      '-DBUILD_WITH_MAGIC=OFF' \
                      '-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON'

    cmake_rouse_args '-DBUILD_WITH_GL_CHECKS=OFF'

    build_all
}


build_emscripten() {
    builddir='buildem'
    if [ -z "$EMPREFIX" ]; then
        die 'EMPREFIX environment variable must be set'
    fi
    cmake_configure_command='emcmake cmake'

    cmake_common_args '-DCMAKE_TOOLCHAIN_FILE="$base/cross/emscripten.cmake"' \
                      '-DCMAKE_BUILD_TYPE=Release' \
                      '-DUSE_ASAN=OFF' \
                      '-DBUILD_WITH_MAGIC=OFF' \
                      '-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON' \
                      '-DCMAKE_C_COMPILER="$base/cross/emccwrap"' \
                      '-DCMAKE_C_COMPILER_AR="$(which emar)"' \
                      '-DCMAKE_C_COMPILER_RANLIB="$(which emranlib)"'

    sdl_image_flags="'-sUSE_SDL_IMAGE=2 -sSDL2_IMAGE_FORMATS=[\"png\"]'"
    cmake_rouse_args '-DUSE_PKGCONFIG=OFF' \
                     '-DBUILD_WITH_GL_CHECKS=OFF' \
                     '-DCGLM_CFLAGS="-isystem$EMPREFIX/include"' \
                     '-DCGLM_LDFLAGS="-L$EMPREFIX/lib"' \
                     '-DCGLM_LIBS="-lm libcglm.a"' \
                     '-DSDL2_CFLAGS=-sUSE_SDL=2' \
                     '-DSDL2_LDFLAGS=-sUSE_SDL=2' \
                     "-DSDL2_IMAGE_CFLAGS=$sdl_image_flags" \
                     "-DSDL2_IMAGE_LDFLAGS=$sdl_image_flags"
    build_all
}


if [ "$#" -ne 1 ]; then
    die_with_usage
fi

cd "$(dirname "$0")"
base="$(pwd)"

case "$1" in
    debug)
        build_debug
        ;;
    release)
        build_release
        ;;
    emscripten)
        build_emscripten
        ;;
    *)
        die_with_usage
        ;;
esac
