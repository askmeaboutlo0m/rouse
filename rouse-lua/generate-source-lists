#!/usr/bin/env perl
#
# generate-sources-list - collects source and header paths for CMake
#
# Copyright (c) 2019 askmeaboutloom
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
use strict;
use warnings;
use FindBin;
use File::Find;
use File::Basename qw(basename);
use File::Spec::Functions qw(abs2rel catdir);
use List::Util qw(uniqstr);

my $rootdir = $FindBin::Bin;
my $libdir  = catdir($rootdir, 'lib');

sub cmakeify {
    my ($path) = @_;
    return '${CMAKE_SOURCE_DIR}/' . abs2rel($path, $rootdir);
}

sub find_sources_and_headers {
    my @headers;
    my @sources;
    my @xls;
    my $wanted = sub {
        return unless -f;
        if (/\.h\z/) {
            push @headers, cmakeify($_);
        }
        elsif (/\.c\z/) {
            push @sources, cmakeify($_);
        }
        elsif (/\.xl\z/) {
            push @xls, cmakeify($_);
        }
    };

    find({wanted => $wanted, no_chdir => 1}, @_);

    my %generated = map { $_ => 1 } map { s/\.xl\z/.c/r } @xls;
    @sources = grep { !exists $generated{$_} } @sources;

    return (\@headers, \@sources, \@xls);
}

sub generate_list {
    my ($name, @files) = @_;
    print "\nset($name\n";
    print join "\n", uniqstr sort map { qq/    "$_"/ } @files;
    print ")\n";
}

sub generate_sources_and_headers {
    my ($prefix, $dir, $post_process) = @_;
    my ($headers, $sources, $xls) = find_sources_and_headers($dir);

    if ($post_process) {
        ($headers, $sources, $xls) = $post_process->($headers, $sources, $xls);
    }

    $post_process->($headers, $sources) if $post_process;
    generate_list("${prefix}_headers", @$headers);
    generate_list("${prefix}_sources", @$sources);
    if (@$xls) {
        generate_list("${prefix}_xls", @$xls);
    }
}


print "# Automatically generated by ", basename(__FILE__), "\n";

generate_sources_and_headers('lua', 'lib/rouse/lua_5_4_0');
generate_sources_and_headers('rouse_lua', 'lib/rouse', sub {
    my ($headers, $sources, $xls) = @_;
    return ([grep { !/lua_5_4_0/ } @$headers],
            [grep { !/lua_5_4_0/ } @$sources],
            [grep { !/lua_5_4_0/ } @$xls]);
});
