/*
 * Copyright (c) 2020 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"
#include "main.h"

static double to_double(lua_State *L, int arg)
{
    void *u = luaL_testudata(L, arg, "double");
    if (u) {
        return *((double *)u);
    }
    else if (lua_isstring(L, arg)) {
        size_t len;
        const char *s = lua_tolstring(L, arg, &len);
        char *end;
        double d = strtod(s, &end);
        if (end == s + len && end != s) {
            return d;
        }
    }
    else {
        int ok;
        lua_Number n = lua_tonumberx(L, arg, &ok);
        if (ok) {
            return (double) n;
        }
    }
    luaL_argerror(L, arg, "not a double");
    R_UNREACHABLE();
}

@xl

UTYPE double R.Double


CONSTRUCTOR new()
    RETVAL = to_double(L, 1);
END

FUNCTION ... double:__tostring()
    double self = to_double(L, 1);
    char *fmt = R_format("%f", self);
    lua_pushstring(L, fmt);
    free(fmt);
    return 1;
END

FUNCTION double double:__add()
    RETVAL = to_double(L, 1) + to_double(L, 2);
END

FUNCTION double double:__sub()
    RETVAL = to_double(L, 1) - to_double(L, 2);
END

FUNCTION double double:__mul()
    RETVAL = to_double(L, 1) * to_double(L, 2);
END

FUNCTION double double:__div()
    RETVAL = to_double(L, 1) / to_double(L, 2);
END

FUNCTION double double:__pow()
    RETVAL = pow(to_double(L, 1), to_double(L, 2));
END

FUNCTION double double:__unm()
    RETVAL = -to_double(L, 1);
END

FUNCTION bool double:__eq()
    RETVAL = to_double(L, 1) == to_double(L, 2);
END

FUNCTION bool double:__lt()
    RETVAL = to_double(L, 1) < to_double(L, 2);
END

FUNCTION bool double:__le()
    RETVAL = to_double(L, 1) <= to_double(L, 2);
END

METHOD lua_Integer to_integer()
    RETVAL = (lua_Integer) *self;
END


METHOD ... sep_rounded()
    char *s = R_format("%.0f", round(*self));
    size_t len = strlen(s);

    luaL_Buffer b;
    luaL_buffinitsize(L, &b, len + len / 3 + 1);

    for (size_t i = 0; i < len; ++i) {
        char c = s[len - i - 1];
        luaL_addchar(&b, c);
        if ((i + 1) % 3 == 0 && i != 0 && i != len - 1) {
            luaL_addchar(&b, ',');
        }
    }

    free(s);

    lua_getglobal(L, "string");
    lua_getfield(L, -1, "reverse");
    luaL_pushresult(&b);
    lua_call(L, 1, 1);
    return 1;
END


INIT extern R_lua_double_init
