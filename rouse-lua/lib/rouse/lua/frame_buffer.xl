/*
 * Copyright (c) 2019, 2021 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

@xl

UTYPE R_V2

UTYPE R_FrameBufferOptions

NEWINDEXFIELD int width
NEWINDEXFIELD int height
NEWINDEXFIELD int samples

NEWINDEX const char *filter
    int filter;
    if (R_str_equal(VALUE, "nearest")) {
        filter = GL_NEAREST;
    }
    else if (R_str_equal(VALUE, "linear")) {
        filter = GL_LINEAR;
    }
    else {
        R_LUA_DIE(L, "Unknown frame buffer filter '%s'", VALUE);
    }
    self->min_filter = self->mag_filter = filter;
END

@c

static R_FrameBufferAttachmentType get_attachment_type(
    lua_State *L, const char *what, const char *value)
{
    if (R_str_equal(value, "none")) {
        return R_FRAME_BUFFER_ATTACHMENT_NONE;
    }
    else if (R_str_equal(value, "buffer")) {
        return R_FRAME_BUFFER_ATTACHMENT_BUFFER;
    }
    else if (R_str_equal(value, "texture")) {
        return R_FRAME_BUFFER_ATTACHMENT_TEXTURE;
    }
    else {
        R_LUA_DIE(L, "Unknown frame buffer %s attachment type '%s'", what, value);
    }
}

@xl

NEWINDEX const char *color_type
    self->color_type = get_attachment_type(L, "color", VALUE);
END

NEWINDEX const char *depth_type
    self->depth_type = get_attachment_type(L, "depth", VALUE);
END

NEWINDEX const char *stencil_type
    self->stencil_type = get_attachment_type(L, "stencil", VALUE);
END

SETFROMTABLE set


PPTYPE R_FrameBuffer R.FrameBuffer

CONSTRUCTOR new()
    int argc = lua_gettop(L);
    if (argc == 1) {
        R_FrameBufferOptions *options = XL_pushnewutypeuv(
                L, (R_FrameBufferOptions[1]){R_frame_buffer_options()},
                sizeof(R_FrameBufferOptions), "R_FrameBufferOptions", 0);
        lua_getfield(L, -1, "set");
        lua_pushvalue(L, -2);
        lua_pushvalue(L, 1);
        lua_call(L, 2, 0);
        RETVAL = R_frame_buffer_new(options);
    }
    else {
        R_LUA_DIE(L, "Wrong number of arguments to R.FrameBuffer.new");
    }
END

CONSTRUCTOR new_2d()
    int argc = lua_gettop(L);
    if (argc == 1) {
        R_FrameBufferOptions *options = XL_pushnewutypeuv(
                L, (R_FrameBufferOptions[1]){R_frame_buffer_2d_options(0, 0)},
                sizeof(R_FrameBufferOptions), "R_FrameBufferOptions", 0);
        lua_getfield(L, -1, "set");
        lua_pushvalue(L, -2);
        lua_pushvalue(L, 1);
        lua_call(L, 2, 0);
        RETVAL = R_frame_buffer_new(options);
    }
    else if (argc == 2) {
        int width  = XL_checkint(L, 1);
        int height = XL_checkint(L, 2);
        RETVAL     = R_frame_buffer_2d_new(width, height);
    }
    else {
        R_LUA_DIE(L, "Wrong number of arguments to R.FrameBuffer.new_2d");
    }
END

DESTRUCTOR = R_frame_buffer_free

FIELDCHECK R_MAGIC_CHECK(R_FrameBuffer, self)
INDEXFIELD int          width
INDEXFIELD int          height
INDEXFIELD int          real_width
INDEXFIELD int          real_height
INDEXFIELD unsigned int handle
INDEXFIELD unsigned int color
INDEXFIELD unsigned int depth
INDEXFIELD unsigned int stencil

INDEX R_V2 ratio = R_frame_buffer_ratio

METHOD void bind() = R_frame_buffer_bind

METHOD void unbind()
    XL_UNUSED(self);
    R_frame_buffer_unbind();
END

FUNCTION void R.FrameBuffer.unbind()
    XL_UNUSED(L);
    R_frame_buffer_unbind();
END

METHOD void write_to_stdout()
#ifdef __EMSCRIPTEN__
    /* You're not gonna record video in Emscripten, so this isn't allowed. */
    XL_UNUSED(self);
    R_LUA_DIE(L, "write_to_stdout not supported in Emscripten");
#else
    R_frame_buffer_write(self, stdout);
#endif
END

INIT extern R_lua_frame_buffer_init
