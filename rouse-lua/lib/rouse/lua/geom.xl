/*
 * Copyright (c) 2019, 2020 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

@xl

UTYPE R_V2 R.V2

CONSTRUCTOR new(float x, float y) = R_v2

CONSTRUCTOR polar(float len, float angle) = R_v2_polar

FIELD float x
FIELD float y

INDEX float length
    float x = self->x;
    float y = self->y;
    RETVAL = sqrtf(x * x + y * y);
END

INDEX any angle
    float x = self->x;
    float y = self->y;
    if (x == 0.0f && y == 0.0f) {
        lua_pushnil(L);
    }
    else {
        XL_pushfloat(L, atan2f(y, x));
    }
    return 1;
END

METHOD ... __tostring()
    lua_pushfstring(L, "R_V2(%f, %f)", R_lua_float2n(self->x),
                                       R_lua_float2n(self->y));
    return 1;
END

METHOD ... unpack()
    XL_pushfloat(L, self->x);
    XL_pushfloat(L, self->y);
    return 2;
END

@c

#define TYPE_BAD   0
#define TYPE_V2    (1 << 0)
#define TYPE_FLOAT (1 << 1)

#define TYPES_V2_V2    (TYPE_V2    | (TYPE_V2    << 2))
#define TYPES_V2_FLOAT (TYPE_V2    | (TYPE_FLOAT << 2))
#define TYPES_FLOAT_V2 (TYPE_FLOAT | (TYPE_V2    << 2))

#define DECONSTRUCT_V2_TYPE(L, ARG, T, V, F) \
    V = luaL_testudata(L, ARG, "R_V2"); \
    if (V) { \
        T = TYPE_V2; \
    } \
    else { \
        int _success; \
        lua_Number _number = lua_tonumberx(L, ARG, &_success); \
        if (_success) { \
            T = TYPE_FLOAT; \
            F = R_lua_n2float(_number); \
        } \
        else { \
            T = TYPE_BAD; \
        } \
    }

#define DECONSTRUCT_V2_TYPES(L, A, B) \
    int    t1,  t2; \
    R_V2  *v1, *v2; \
    float  f1,  f2; \
    DECONSTRUCT_V2_TYPE(L, A, t1, v1, f1); \
    DECONSTRUCT_V2_TYPE(L, B, t2, v2, f2); \
    int types = t1 | (t2 << 2)

#define DIE_WITH_BAD_V2_TYPES(L, OP, A, B) \
    R_LUA_DIE(L, "R_V2 operation (%s " OP " %s) not applicable", \
              lua_typename(L, lua_type(L, A)), lua_typename(L, lua_type(L, B)))

@xl

FUNCTION R_V2 R_V2:__add(any a, any b)
    DECONSTRUCT_V2_TYPES(L, a, b);
    switch (types) {
        case TYPES_V2_V2:
            RETVAL = R_v2_add(*v1, *v2);
            break;
        case TYPES_V2_FLOAT:
            RETVAL = R_v2_adds(*v1, f2);
            break;
        case TYPES_FLOAT_V2:
            RETVAL = R_v2_adds(*v2, f1);
            break;
        default:
            DIE_WITH_BAD_V2_TYPES(L, "+", a, b);
    }
END

FUNCTION R_V2 R_V2:__sub(any a, any b)
    DECONSTRUCT_V2_TYPES(L, a, b);
    XL_UNUSED(f1);
    switch (types) {
        case TYPES_V2_V2:
            RETVAL = R_v2_sub(*v1, *v2);
            break;
        case TYPES_V2_FLOAT:
            RETVAL = R_v2_subs(*v1, f2);
            break;
        default:
            DIE_WITH_BAD_V2_TYPES(L, "-", a, b);
    }
END

FUNCTION R_V2 R_V2:__mul(any a, any b)
    DECONSTRUCT_V2_TYPES(L, a, b);
    switch (types) {
        case TYPES_V2_FLOAT:
            RETVAL = R_v2_scale(*v1, f2);
            break;
        case TYPES_FLOAT_V2:
            RETVAL = R_v2_scale(*v2, f1);
            break;
        default:
            DIE_WITH_BAD_V2_TYPES(L, "*", a, b);
    }
END

FUNCTION R_V2 R_V2:__div(any a, any b)
    DECONSTRUCT_V2_TYPES(L, a, b);
    (void) f1;
    switch (types) {
        case TYPES_V2_FLOAT:
            RETVAL = R_v2_scale(*v1, 1.0f / f2);
            break;
        default:
            DIE_WITH_BAD_V2_TYPES(L, "*", a, b);
    }
END

METHOD float distance2(R_V2 *b)
    RETVAL = R_v2_distance2(*self, *b);
END

METHOD float distance(R_V2 *b)
    RETVAL = R_v2_distance(*self, *b);
END

SETFROMTABLE set


UTYPE R_V3 R.V3

CONSTRUCTOR new(float x, float y, float z) = R_v3

FIELD float x
FIELD float y
FIELD float z

INDEX float length
    float x = self->x;
    float y = self->y;
    float z = self->z;
    RETVAL = sqrtf(x * x + y * y + z * z);
END

METHOD ... __tostring()
    lua_pushfstring(L, "R_V3(%f, %f, %f)", R_lua_float2n(self->x),
                                           R_lua_float2n(self->y),
                                           R_lua_float2n(self->z));
    return 1;
END

METHOD ... unpack()
    XL_pushfloat(L, self->x);
    XL_pushfloat(L, self->y);
    XL_pushfloat(L, self->z);
    return 3;
END

SETFROMTABLE set


UTYPE R_V4 R.V4

CONSTRUCTOR new(float x, float y, float z, float w) = R_v4

FIELD float x
FIELD float y
FIELD float z
FIELD float w

INDEX float length
    float x = self->x;
    float y = self->y;
    float z = self->z;
    float w = self->w;
    RETVAL = sqrtf(x * x + y * y + z * z + w * w);
END

METHOD ... __tostring()
    lua_pushfstring(L, "R_V4(%f, %f, %f, %f)", R_lua_float2n(self->x),
                                               R_lua_float2n(self->y),
                                               R_lua_float2n(self->z),
                                               R_lua_float2n(self->w));
    return 1;
END

METHOD ... unpack()
    XL_pushfloat(L, self->x);
    XL_pushfloat(L, self->y);
    XL_pushfloat(L, self->z);
    XL_pushfloat(L, self->w);
    return 4;
END

SETFROMTABLE set


INIT extern R_lua_geom_init
