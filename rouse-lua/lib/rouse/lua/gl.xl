/*
 * Copyright (c) 2019 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"


typedef unsigned int R_LuaGlBuffer;
typedef unsigned int R_LuaGlProgram;
typedef unsigned int R_LuaGlTexture;

@xl

PPTYPE R_MeshBuffer
UTYPE  R_M4


FUNCTION void R.GL.clear(float r, float g, float b, float a,
                         float depth, int stencil) = R_gl_clear


FUNCTION void R.GL.uniform_1i(int location, int i)
    R_GL_CLEAR_ERROR();
    R_GL(glUniform1i, location, i);
END

FUNCTION void R.GL.uniform_1f(int location, float f)
    R_GL_CLEAR_ERROR();
    R_GL(glUniform1f, location, f);
END

FUNCTION void R.GL.uniform_m4(int location, R_M4 *m4)
    R_GL_CLEAR_ERROR();
    R_GL(glUniformMatrix4fv, location, 1, GL_FALSE, R_M4_GL(*m4));
END


FUNCTION void R.GL.enable(unsigned int cap)
    R_GL_CLEAR_ERROR();
    R_GL(glEnable, cap);
END

FUNCTION void R.GL.disable(unsigned int cap)
    R_GL_CLEAR_ERROR();
    R_GL(glDisable, cap);
END

FUNCTION void R.GL.depth_func(unsigned int func)
    R_GL_CLEAR_ERROR();
    R_GL(glDepthFunc, func);
END

FUNCTION void R.GL.cull_face(unsigned int face)
    R_GL_CLEAR_ERROR();
    R_GL(glCullFace, face);
END

FUNCTION void R.GL.blend_func(unsigned int sfactor, unsigned int dfactor)
    R_GL_CLEAR_ERROR();
    R_GL(glBlendFunc, sfactor, dfactor);
END


FUNCTION void R.GL.enable_vertex_attrib_array(unsigned int index)
    R_GL_CLEAR_ERROR();
    R_GL(glEnableVertexAttribArray, index);
END

FUNCTION void R.GL.enable_vertex_attrib_arrays()
    R_GL_CLEAR_ERROR();
    lua_Integer argc = lua_gettop(L);
    for (lua_Integer i = 1; i <= argc; ++i) {
        unsigned int index = XL_checkuint(L, i);
        R_GL(glEnableVertexAttribArray, index);
    }
END

FUNCTION void R.GL.disable_vertex_attrib_array(unsigned int index)
    R_GL_CLEAR_ERROR();
    R_GL(glDisableVertexAttribArray, index);
END

FUNCTION void R.GL.disable_vertex_attrib_arrays()
    R_GL_CLEAR_ERROR();
    lua_Integer argc = lua_gettop(L);
    for (lua_Integer i = 1; i <= argc; ++i) {
        unsigned int index = XL_checkuint(L, i);
        R_GL(glDisableVertexAttribArray, index);
    }
END

FUNCTION void R.GL.disable_all_vertex_attrib_arrays()
    XL_UNUSED(L);
    R_GL_CLEAR_ERROR();
    unsigned int max = R_int2uint(R_gl_max_vertex_attribs);
    for (unsigned int index = 0; index < max; ++index) {
        R_GL(glDisableVertexAttribArray, index);
    }
END


FUNCTION void R.GL.buffer_data(R_MeshBuffer *mbuf, unsigned int target,
                               unsigned int usage)
    R_BufferType buftype = mbuf->type;
    size_t       size;
    void         *data;
    if (buftype == R_BUFFER_TYPE_USHORT) {
        size = sizeof(*mbuf->ushorts) * R_int2size(mbuf->count);
        data = mbuf->ushorts;
    }
    else if (buftype == R_BUFFER_TYPE_FLOAT) {
        size = sizeof(*mbuf->floats) * R_int2size(mbuf->count);
        data = mbuf->floats;
    }
    else {
        R_LUA_DIE(L, "Unknown buffer type: %d", (int) buftype);
    }
    R_GL_CLEAR_ERROR();
    R_GL(glBufferData, target, R_size2ptrdiff(size), data, usage);
END

FUNCTION void R.GL.vertex_attrib_pointer(R_MeshBuffer *mbuf, unsigned int index)
    R_BufferType buftype = mbuf->type;
    unsigned int type;
    if (buftype == R_BUFFER_TYPE_USHORT) {
        type = GL_UNSIGNED_SHORT;
    }
    else if (buftype == R_BUFFER_TYPE_FLOAT) {
        type = GL_FLOAT;
    }
    else {
        R_LUA_DIE(L, "Unknown buffer type: %d", (int) buftype);
    }
    R_GL_CLEAR_ERROR();
    R_GL(glVertexAttribPointer, index, mbuf->divisor, type, GL_FALSE, 0, NULL);
END


FUNCTION void R.GL.draw_arrays(unsigned int mode, int first, int count)
    R_GL_CLEAR_ERROR();
    R_GL(glDrawArrays, mode, first, count);
END

FUNCTION void R.GL.draw_elements(unsigned int mode, int count)
    R_GL_CLEAR_ERROR();
    R_GL(glDrawElements, mode, count, GL_UNSIGNED_SHORT, NULL);
END


FUNCTION void R.GL.active_texture(unsigned int index)
    R_GL_CLEAR_ERROR();
    R_GL(glActiveTexture, GL_TEXTURE0 + index);
END

FUNCTION void R.GL.bind_texture(unsigned int type, unsigned int texture)
    R_GL_CLEAR_ERROR();
    R_GL(glBindTexture, type, texture);
END

FUNCTION void R.GL.bind_texture2d(unsigned int texture)
    R_GL_CLEAR_ERROR();
    R_GL(glBindTexture, GL_TEXTURE_2D, texture);
END


PPTYPE R_LuaGlBuffer R.GL.Buffer

CONSTRUCTOR new()
    R_GL_CLEAR_ERROR();
    RETVAL = R_NEW(RETVAL);
    R_GL(glGenBuffers, 1, RETVAL);
END

DESTRUCTOR
    R_GL_CLEAR_ERROR();
    R_GL(glDeleteBuffers, 1, self);
    free(self);
END

METHOD void bind(unsigned int target)
    R_GL_CLEAR_ERROR();
    R_GL(glBindBuffer, target, *self);
END

METHOD void unbind(unsigned int target)
    XL_UNUSED(self);
    R_GL_CLEAR_ERROR();
    R_GL(glBindBuffer, target, 0);
END

FUNCTION void R.GL.Buffer.unbind(unsigned int target)
    XL_UNUSED(L);
    R_GL_CLEAR_ERROR();
    R_GL(glBindBuffer, target, 0);
END


PPTYPE R_LuaGlProgram R.GL.Program

CONSTRUCTOR new(const char *vert, const char *frag)
    RETVAL  = R_NEW(RETVAL);
    *RETVAL = R_gl_program_new(vert, frag);
END

DESTRUCTOR
    R_gl_program_free(*self);
    free(self);
END

METHOD int uniform_location(const char *name)
    RETVAL = R_gl_uniform_location(*self, name);
END

METHOD void bind()
    R_GL_CLEAR_ERROR();
    R_GL(glUseProgram, *self);
END

METHOD void unbind()
    XL_UNUSED(self);
    R_GL_CLEAR_ERROR();
    R_GL(glUseProgram, 0);
END

FUNCTION void R.GL.Program.unbind()
    XL_UNUSED(L);
    R_GL_CLEAR_ERROR();
    R_GL(glUseProgram, 0);
END


PPTYPE R_LuaGlTexture R.GL.Texture

CONSTRUCTOR new(const char *path)
    R_TextureOptions options = R_texture_options();
    /* TODO: fill options */
    RETVAL  = R_NEW(RETVAL);
    *RETVAL = R_gl_texture_new(path, &options);
END

DESTRUCTOR
    R_gl_texture_free(*self);
    free(self);
END

INDEX unsigned int id
    RETVAL = *self;
END


ENUM GL s/GL_//
    GL_DEPTH_BUFFER_BIT
    GL_STENCIL_BUFFER_BIT
    GL_COLOR_BUFFER_BIT
    GL_FALSE
    GL_TRUE
    GL_POINTS
    GL_LINES
    GL_LINE_LOOP
    GL_LINE_STRIP
    GL_TRIANGLES
    GL_TRIANGLE_STRIP
    GL_TRIANGLE_FAN
    GL_ZERO
    GL_ONE
    GL_SRC_COLOR
    GL_ONE_MINUS_SRC_COLOR
    GL_SRC_ALPHA
    GL_ONE_MINUS_SRC_ALPHA
    GL_DST_ALPHA
    GL_ONE_MINUS_DST_ALPHA
    GL_DST_COLOR
    GL_ONE_MINUS_DST_COLOR
    GL_SRC_ALPHA_SATURATE
    GL_FUNC_ADD
    GL_BLEND_EQUATION
    GL_BLEND_EQUATION_RGB
    GL_BLEND_EQUATION_ALPHA
    GL_FUNC_SUBTRACT
    GL_FUNC_REVERSE_SUBTRACT
    GL_BLEND_DST_RGB
    GL_BLEND_SRC_RGB
    GL_BLEND_DST_ALPHA
    GL_BLEND_SRC_ALPHA
    GL_CONSTANT_COLOR
    GL_ONE_MINUS_CONSTANT_COLOR
    GL_CONSTANT_ALPHA
    GL_ONE_MINUS_CONSTANT_ALPHA
    GL_BLEND_COLOR
    GL_ARRAY_BUFFER
    GL_ELEMENT_ARRAY_BUFFER
    GL_ARRAY_BUFFER_BINDING
    GL_ELEMENT_ARRAY_BUFFER_BINDING
    GL_STREAM_DRAW
    GL_STATIC_DRAW
    GL_DYNAMIC_DRAW
    GL_BUFFER_SIZE
    GL_BUFFER_USAGE
    GL_CURRENT_VERTEX_ATTRIB
    GL_FRONT
    GL_BACK
    GL_FRONT_AND_BACK
    GL_TEXTURE_2D
    GL_CULL_FACE
    GL_BLEND
    GL_DITHER
    GL_STENCIL_TEST
    GL_DEPTH_TEST
    GL_SCISSOR_TEST
    GL_POLYGON_OFFSET_FILL
    GL_SAMPLE_ALPHA_TO_COVERAGE
    GL_SAMPLE_COVERAGE
    GL_NO_ERROR
    GL_INVALID_ENUM
    GL_INVALID_VALUE
    GL_INVALID_OPERATION
    GL_OUT_OF_MEMORY
    GL_CW
    GL_CCW
    GL_LINE_WIDTH
    GL_ALIASED_POINT_SIZE_RANGE
    GL_ALIASED_LINE_WIDTH_RANGE
    GL_CULL_FACE_MODE
    GL_FRONT_FACE
    GL_DEPTH_RANGE
    GL_DEPTH_WRITEMASK
    GL_DEPTH_CLEAR_VALUE
    GL_DEPTH_FUNC
    GL_STENCIL_CLEAR_VALUE
    GL_STENCIL_FUNC
    GL_STENCIL_FAIL
    GL_STENCIL_PASS_DEPTH_FAIL
    GL_STENCIL_PASS_DEPTH_PASS
    GL_STENCIL_REF
    GL_STENCIL_VALUE_MASK
    GL_STENCIL_WRITEMASK
    GL_STENCIL_BACK_FUNC
    GL_STENCIL_BACK_FAIL
    GL_STENCIL_BACK_PASS_DEPTH_FAIL
    GL_STENCIL_BACK_PASS_DEPTH_PASS
    GL_STENCIL_BACK_REF
    GL_STENCIL_BACK_VALUE_MASK
    GL_STENCIL_BACK_WRITEMASK
    GL_VIEWPORT
    GL_SCISSOR_BOX
    GL_COLOR_CLEAR_VALUE
    GL_COLOR_WRITEMASK
    GL_UNPACK_ALIGNMENT
    GL_PACK_ALIGNMENT
    GL_MAX_TEXTURE_SIZE
    GL_MAX_VIEWPORT_DIMS
    GL_SUBPIXEL_BITS
    GL_RED_BITS
    GL_GREEN_BITS
    GL_BLUE_BITS
    GL_ALPHA_BITS
    GL_DEPTH_BITS
    GL_STENCIL_BITS
    GL_POLYGON_OFFSET_UNITS
    GL_POLYGON_OFFSET_FACTOR
    GL_TEXTURE_BINDING_2D
    GL_SAMPLE_BUFFERS
    GL_SAMPLES
    GL_SAMPLE_COVERAGE_VALUE
    GL_SAMPLE_COVERAGE_INVERT
    GL_NUM_COMPRESSED_TEXTURE_FORMATS
    GL_COMPRESSED_TEXTURE_FORMATS
    GL_DONT_CARE
    GL_FASTEST
    GL_NICEST
    GL_GENERATE_MIPMAP_HINT
    GL_BYTE
    GL_UNSIGNED_BYTE
    GL_SHORT
    GL_UNSIGNED_SHORT
    GL_INT
    GL_UNSIGNED_INT
    GL_FLOAT
    GL_FIXED
    GL_DEPTH_COMPONENT
    GL_ALPHA
    GL_RGB
    GL_RGBA
    GL_LUMINANCE
    GL_LUMINANCE_ALPHA
    GL_UNSIGNED_SHORT_4_4_4_4
    GL_UNSIGNED_SHORT_5_5_5_1
    GL_UNSIGNED_SHORT_5_6_5
    GL_FRAGMENT_SHADER
    GL_VERTEX_SHADER
    GL_MAX_VERTEX_ATTRIBS
    GL_MAX_VERTEX_UNIFORM_VECTORS
    GL_MAX_VARYING_VECTORS
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    GL_MAX_TEXTURE_IMAGE_UNITS
    GL_MAX_FRAGMENT_UNIFORM_VECTORS
    GL_SHADER_TYPE
    GL_DELETE_STATUS
    GL_LINK_STATUS
    GL_VALIDATE_STATUS
    GL_ATTACHED_SHADERS
    GL_ACTIVE_UNIFORMS
    GL_ACTIVE_UNIFORM_MAX_LENGTH
    GL_ACTIVE_ATTRIBUTES
    GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    GL_SHADING_LANGUAGE_VERSION
    GL_CURRENT_PROGRAM
    GL_NEVER
    GL_LESS
    GL_EQUAL
    GL_LEQUAL
    GL_GREATER
    GL_NOTEQUAL
    GL_GEQUAL
    GL_ALWAYS
    GL_KEEP
    GL_REPLACE
    GL_INCR
    GL_DECR
    GL_INVERT
    GL_INCR_WRAP
    GL_DECR_WRAP
    GL_VENDOR
    GL_RENDERER
    GL_VERSION
    GL_EXTENSIONS
    GL_NEAREST
    GL_LINEAR
    GL_NEAREST_MIPMAP_NEAREST
    GL_LINEAR_MIPMAP_NEAREST
    GL_NEAREST_MIPMAP_LINEAR
    GL_LINEAR_MIPMAP_LINEAR
    GL_TEXTURE_MAG_FILTER
    GL_TEXTURE_MIN_FILTER
    GL_TEXTURE_WRAP_S
    GL_TEXTURE_WRAP_T
    GL_TEXTURE
    GL_TEXTURE_CUBE_MAP
    GL_TEXTURE_BINDING_CUBE_MAP
    GL_TEXTURE_CUBE_MAP_POSITIVE_X
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    GL_MAX_CUBE_MAP_TEXTURE_SIZE
    GL_TEXTURE0
    GL_TEXTURE1
    GL_TEXTURE2
    GL_TEXTURE3
    GL_TEXTURE4
    GL_TEXTURE5
    GL_TEXTURE6
    GL_TEXTURE7
    GL_TEXTURE8
    GL_TEXTURE9
    GL_TEXTURE10
    GL_TEXTURE11
    GL_TEXTURE12
    GL_TEXTURE13
    GL_TEXTURE14
    GL_TEXTURE15
    GL_TEXTURE16
    GL_TEXTURE17
    GL_TEXTURE18
    GL_TEXTURE19
    GL_TEXTURE20
    GL_TEXTURE21
    GL_TEXTURE22
    GL_TEXTURE23
    GL_TEXTURE24
    GL_TEXTURE25
    GL_TEXTURE26
    GL_TEXTURE27
    GL_TEXTURE28
    GL_TEXTURE29
    GL_TEXTURE30
    GL_TEXTURE31
    GL_ACTIVE_TEXTURE
    GL_REPEAT
    GL_CLAMP_TO_EDGE
    GL_MIRRORED_REPEAT
    GL_FLOAT_VEC2
    GL_FLOAT_VEC3
    GL_FLOAT_VEC4
    GL_INT_VEC2
    GL_INT_VEC3
    GL_INT_VEC4
    GL_BOOL
    GL_BOOL_VEC2
    GL_BOOL_VEC3
    GL_BOOL_VEC4
    GL_FLOAT_MAT2
    GL_FLOAT_MAT3
    GL_FLOAT_MAT4
    GL_SAMPLER_2D
    GL_SAMPLER_CUBE
    GL_VERTEX_ATTRIB_ARRAY_ENABLED
    GL_VERTEX_ATTRIB_ARRAY_SIZE
    GL_VERTEX_ATTRIB_ARRAY_STRIDE
    GL_VERTEX_ATTRIB_ARRAY_TYPE
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    GL_VERTEX_ATTRIB_ARRAY_POINTER
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    GL_IMPLEMENTATION_COLOR_READ_TYPE
    GL_IMPLEMENTATION_COLOR_READ_FORMAT
    GL_COMPILE_STATUS
    GL_INFO_LOG_LENGTH
    GL_SHADER_SOURCE_LENGTH
    GL_SHADER_COMPILER
    GL_SHADER_BINARY_FORMATS
    GL_NUM_SHADER_BINARY_FORMATS
    GL_LOW_FLOAT
    GL_MEDIUM_FLOAT
    GL_HIGH_FLOAT
    GL_LOW_INT
    GL_MEDIUM_INT
    GL_HIGH_INT
    GL_FRAMEBUFFER
    GL_RENDERBUFFER
    GL_RGBA4
    GL_RGB5_A1
    GL_RGB565
    GL_DEPTH_COMPONENT16
    GL_STENCIL_INDEX8
    GL_RENDERBUFFER_WIDTH
    GL_RENDERBUFFER_HEIGHT
    GL_RENDERBUFFER_INTERNAL_FORMAT
    GL_RENDERBUFFER_RED_SIZE
    GL_RENDERBUFFER_GREEN_SIZE
    GL_RENDERBUFFER_BLUE_SIZE
    GL_RENDERBUFFER_ALPHA_SIZE
    GL_RENDERBUFFER_DEPTH_SIZE
    GL_RENDERBUFFER_STENCIL_SIZE
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    GL_COLOR_ATTACHMENT0
    GL_DEPTH_ATTACHMENT
    GL_STENCIL_ATTACHMENT
    GL_NONE
    GL_FRAMEBUFFER_COMPLETE
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    GL_FRAMEBUFFER_UNSUPPORTED
    GL_FRAMEBUFFER_BINDING
    GL_RENDERBUFFER_BINDING
    GL_MAX_RENDERBUFFER_SIZE
    GL_INVALID_FRAMEBUFFER_OPERATION
END


INIT extern R_lua_gl_init
