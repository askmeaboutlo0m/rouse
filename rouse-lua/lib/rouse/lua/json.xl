/*
 * Copyright (c) 2019 - 2022 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

static void value_to_lua(lua_State *L, JSON_Value *value);

static void object_to_lua(lua_State *L, JSON_Object *object)
{
    size_t count = json_object_get_count(object);
    lua_createtable(L, 0, R_size2int(count));

    for (size_t i = 0; i < count; ++i) {
        value_to_lua(L, json_object_get_value_at(object, i));
        lua_setfield(L, -2, json_object_get_name(object, i));
    }
}

static void array_to_lua(lua_State *L, JSON_Array *array)
{
    size_t count = json_array_get_count(array);
    lua_createtable(L, R_size2int(count), 0);

    for (size_t i = 0; i < count; ++i) {
        value_to_lua(L, json_array_get_value(array, i));
        lua_seti(L, -2, R_lua_size2i(i) + 1);
    }
}

static void value_to_lua(lua_State *L, JSON_Value *value)
{
    JSON_Value_Type type = json_type(value);
    switch (type) {
        case JSONNull:
            lua_pushnil(L);
            break;
        case JSONString:
            lua_pushstring(L, json_string(value));
            break;
        case JSONNumber:
            lua_pushnumber(L, R_lua_double2n(json_number(value)));
            break;
        case JSONObject:
            object_to_lua(L, json_object(value));
            break;
        case JSONArray:
            array_to_lua(L, json_array(value));
            break;
        case JSONBoolean:
            lua_pushboolean(L, json_boolean(value));
            break;
        default:
            luaL_error(L, "Unknown JSON value type %d", (int) type);
    }
}

static int protected_table_from_json(lua_State *L)
{
    JSON_Value *value = lua_touserdata(L, 1);
    value_to_lua(L, value);
    return 1;
}

static int push_table_from_json(lua_State *L, JSON_Value *value)
{
    lua_pushcfunction(L, protected_table_from_json);
    lua_pushlightuserdata(L, value);
    int error = lua_pcall(L, 1, 1, 0);
    json_value_free(value);
    return error ? lua_error(L) : 1;
}

@xl

FUNCTION ... R.Json.parse_string(const char *string)
    bool with_comments = lua_toboolean(L, 2);

    JSON_Value *value = with_comments
                      ? json_parse_string_with_comments(string)
                      : json_parse_string(string);
    if (!value) {
        luaL_error(L, "Can't parse JSON string (%s comments) '%s'",
                   with_comments ? "with" : "without", string);
    }
    return push_table_from_json(L, value);
END

FUNCTION ... R.Json.parse_file(const char *filename)
    bool with_comments = lua_toboolean(L, 2);

    JSON_Value *value = with_comments
                      ? json_parse_file_with_comments(filename)
                      : json_parse_file(filename);
    if (!value) {
        luaL_error(L, "Can't parse JSON file (%s comments) '%s'",
                   with_comments ? "with" : "without", filename);
    }
    return push_table_from_json(L, value);
END


@c

static int to_json_value(lua_State *L);

static JSON_Value *table_to_json_array(lua_State *L, lua_Integer numeric_keys)
{
    lua_Integer len = luaL_len(L, 1);
    if (len != numeric_keys) {
        R_LUA_DIE(L, "Numeric keys not sequential (%I keys with length %I)",
                  numeric_keys, len);
    }

    JSON_Value *value = json_value_init_array();
    JSON_Array *array = json_value_get_array(value);
    for (int i = 0; i < len; ++i) {
        lua_pushcfunction(L, to_json_value);
        lua_geti(L, 1, i + 1);
        if (lua_pcall(L, 1, 1, 0) == LUA_OK) {
            JSON_Value *element = lua_touserdata(L, -1);
            json_array_append_value(array, element);
            lua_pop(L, 1);
        }
        else {
            json_value_free(value);
            lua_error(L);
            R_UNREACHABLE();
        }
    }
    return value;
}

static JSON_Value *table_to_json_object(lua_State *L)
{
    JSON_Value  *value  = json_value_init_object();
    JSON_Object *object = json_value_get_object(value);
    lua_pushnil(L);
    while (lua_next(L, 1)) {
        lua_pushcfunction(L, to_json_value);
        lua_pushvalue(L, -2);
        if (lua_pcall(L, 1, 1, 0) == LUA_OK) {
            JSON_Value *element = lua_touserdata(L, -1);
            const char *key     = lua_tostring(L, -3);
            json_object_set_value(object, key, element);
            lua_pop(L, 2); /* returned value and iteration value */
        }
        else {
            json_value_free(value);
            lua_error(L);
            R_UNREACHABLE();
        }
    }
    return value;
}

static JSON_Value *table_to_json(lua_State *L)
{
    lua_Integer numeric_keys = 0;
    bool        string_keys  = false;
    lua_pushnil(L);
    while (lua_next(L, 1)) {
        int type = lua_type(L, -2);
        switch (type) {
            case LUA_TNUMBER:
                if (string_keys) {
                    R_LUA_DIE(L, "Can't serialize table with both "
                                 "string and numeric keys to JSON");
                }
                ++numeric_keys;
                break;
            case LUA_TSTRING:
                if (numeric_keys != 0) {
                    R_LUA_DIE(L, "Can't serialize table with both "
                                 "string and numeric keys to JSON");
                }
                string_keys = true;
                break;
            default:
                R_LUA_DIE(L, "Can't serialize table with %s key to JSON",
                          lua_typename(L, type));
        }
        lua_pop(L, 1);
    }

    if (numeric_keys != 0) {
        return table_to_json_array(L, numeric_keys);
    }
    else { /* string keys or empty table */
        return table_to_json_object(L);
    }
}

static JSON_Value *convert_to_json_value(lua_State *L)
{
    int type = lua_type(L, 1);
    switch (type) {
        case LUA_TNIL:
            return json_value_init_null();
        case LUA_TNUMBER:
            return json_value_init_number(R_lua_n2double(lua_tonumber(L, 1)));
        case LUA_TBOOLEAN:
            return json_value_init_boolean(lua_toboolean(L, 1));
        case LUA_TSTRING:
            return json_value_init_string(lua_tostring(L, 1));
        case LUA_TTABLE:
            return table_to_json(L);
        default:
            R_LUA_DIE(L, "Can't serialize %s to JSON", lua_typename(L, type));
    }
}

static int to_json_value(lua_State *L)
{
    JSON_Value *value = convert_to_json_value(L);
    lua_pushlightuserdata(L, value);
    return 1;
}

@xl

FUNCTION ... R.Json.to_string(any x)
    bool pretty = lua_toboolean(L, 2);

    lua_pushcfunction(L, to_json_value);
    lua_pushvalue(L, x);
    lua_call(L, 1, 1);

    JSON_Value *value  = lua_touserdata(L, -1);
    char       *string = pretty
                       ? json_serialize_to_string_pretty(value)
                       : json_serialize_to_string(value);
    json_value_free(value);

    lua_pushstring(L, string);
    json_free_serialized_string(string);
    return 1;
END

FUNCTION ... R.Json.to_file(any x, const char *filename)
    bool pretty = lua_toboolean(L, 3);

    lua_pushcfunction(L, to_json_value);
    lua_pushvalue(L, x);
    lua_call(L, 1, 1);

    JSON_Value  *value = lua_touserdata(L, -1);
    JSON_Status status = pretty
                       ? json_serialize_to_file_pretty(value, filename)
                       : json_serialize_to_file(value, filename);
    json_value_free(value);

    if (status == JSONSuccess) {
        return 0;
    }
    else {
        return luaL_error(L, "Error writing JSON to file '%s'", filename);
    }
END


INIT extern R_lua_json_init
