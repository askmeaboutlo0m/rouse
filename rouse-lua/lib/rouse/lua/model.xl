/*
 * Copyright (c) 2021 - 2022 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

@xl

UTYPE R_M4


PPTYPE R_MeshBuffer R.MeshBuffer

CONSTRUCTOR new(const char *type_name, const char *name, int count, int divisor)
    R_BufferType type;
    if (R_str_equal(type_name, "float")) {
        type = R_BUFFER_TYPE_FLOAT;
    }
    else if (R_str_equal(type_name, "ushort")) {
        type = R_BUFFER_TYPE_USHORT;
    }
    else {
        R_LUA_DIE(L, "Unknown mesh buffer type '%s'", type_name);
    }

    if (count <= 0) {
        R_LUA_DIE(L, "Invalid mesh buffer count %d", count);
    }
    if (divisor <= 0) {
        R_LUA_DIE(L, "Invalid mesh buffer divisor %d", divisor);
    }
    if (count % divisor != 0) {
        R_LUA_DIE(L, "Mesh buffer count %d is not divisible by %d",
                  count, divisor);
    }

    RETVAL = R_mesh_buffer_new(type, name, count, divisor);
END

DESTRUCTOR = R_mesh_buffer_decref

INDEXFIELD int        refs
INDEXFIELD const char *name
INDEXFIELD int        count
INDEXFIELD int        divisor

INDEX lua_Integer type
    RETVAL = (lua_Integer) self->type;
END

INDEX const char *type_name
    switch (self->type) {
        case R_BUFFER_TYPE_USHORT:
            RETVAL = "ushort";
            break;
        case R_BUFFER_TYPE_FLOAT:
            RETVAL = "float";
            break;
        default:
            RETVAL = "unknown";
            break;
    }
END

@c

#define INDEX_VALUES(L, MBUF, PUSH, TYPE, FIELD) do { \
        int _count = (MBUF)->count; \
        lua_createtable(L, _count, 0); \
        TYPE *FIELD = (MBUF)->values.FIELD; \
        for (int _i = 0; _i < _count; ++_i) { \
            PUSH(L, FIELD[_i]); \
            lua_seti(L, -2, _i + 1); \
        } \
    } while (0)

#define NEWINDEX_VALUES(L, MBUF, TABLE, COUNT, CHECK, TYPE, FIELD) do { \
        TYPE *FIELD = (MBUF)->values.FIELD; \
        for (int _i = 0; _i < (COUNT); ++_i) { \
            lua_geti(L, TABLE, _i + 1); \
            FIELD[_i] = CHECK(L, -1); \
            lua_pop(L, 1); \
        } \
    } while (0)

@xl

INDEX ... values
    switch (self->type) {
        case R_BUFFER_TYPE_USHORT:
            INDEX_VALUES(L, self, XL_pushushort, unsigned short, ushorts);
            break;
        case R_BUFFER_TYPE_FLOAT:
            INDEX_VALUES(L, self, XL_pushfloat, float, floats);
            break;
        default:
            R_LUA_DIE(L, "Unknown mesh buffer type '%d'", (int) self->type);
    }
    return 1;
END

NEWINDEX table values
    int len = (int) luaL_len(L, VALUE);
    if (len != self->count) {
        R_LUA_DIE(L, "Got %d values, but need %d", len, self->count);
    }
    switch (self->type) {
        case R_BUFFER_TYPE_USHORT:
            NEWINDEX_VALUES(L, self, VALUE, len, XL_checkushort,
                            unsigned short, ushorts);
            break;
        case R_BUFFER_TYPE_FLOAT:
            NEWINDEX_VALUES(L, self, VALUE, len, XL_checkfloat,
                            float, floats);
            break;
        default:
            R_LUA_DIE(L, "Unknown mesh buffer type '%d'", (int) self->type);
    }
END

@c

static void check_mesh_buffer_index(lua_State *L, R_MeshBuffer *mbuf, int index)
{
    if (index < 1 || index > mbuf->count) {
        R_LUA_DIE(L, "Mesh buffer index %d out of range", index);
    }
}

@xl

INTINDEX ...
    check_mesh_buffer_index(L, self, INDEX);
    switch (self->type) {
        case R_BUFFER_TYPE_USHORT:
            XL_pushushort(L, self->values.ushorts[INDEX - 1]);
            break;
        case R_BUFFER_TYPE_FLOAT:
            XL_pushfloat(L, self->values.floats[INDEX - 1]);
            break;
        default:
            R_LUA_DIE(L, "Unknown mesh buffer type '%d'", (int) self->type);
    }
    return 1;
END

INTNEWINDEX any
    check_mesh_buffer_index(L, self, INDEX);
    switch (self->type) {
        case R_BUFFER_TYPE_USHORT:
            self->values.ushorts[INDEX - 1] = XL_checkushort(L, VALUE);
            break;
        case R_BUFFER_TYPE_FLOAT:
            self->values.floats[INDEX - 1] = XL_checkfloat(L, VALUE);
            break;
        default:
            R_LUA_DIE(L, "Unknown mesh buffer type '%d'", (int) self->type);
    }
END


PPTYPE R_Mesh

DESTRUCTOR = R_mesh_decref

INDEXFIELD int refs
INDEXFIELD int buffer_count = buffer.count

METHOD <NEW>R_MeshBuffer *buffer()
    int type = lua_type(L, 2);
    if (type == LUA_TNUMBER) {
        int index = XL_checkint(L, 2);
        if (index > 0 && index <= self->buffer.count) {
            RETVAL = R_mesh_buffer_incref(self->buffer.values[index - 1]);
        }
        else {
            R_LUA_DIE(L, "Mesh buffer index %d out of bounds [1, %d]",
                      index, self->buffer.count);
        }
    }
    else if (type == LUA_TSTRING) {
        const char *name = lua_tostring(L, 2);
        int index = R_mesh_buffer_index_by_name(self, name);
        if (index >= 0) {
            RETVAL = R_mesh_buffer_incref(self->buffer.values[index]);
        }
        else {
            R_LUA_DIE(L, "Mesh buffer with name '%s' not found", name);
        }
    }
    else {
        R_LUA_DIE(L, "Can't get a mesh buffer by a %s", lua_typename(L, type));
    }
END


PPTYPE R_Node

DESTRUCTOR = R_node_decref

INDEXFIELD int        refs
INDEXFIELD const char *name
INDEXFIELD R_M4       transform
INDEXFIELD int        child_count = child.count
INDEXFIELD int        mesh_count  = mesh.count

METHOD <NEW>R_Node *child(int index)
    if (index > 0 && index <= self->child.count) {
        RETVAL = R_node_incref(self->child.values[index - 1]);
    }
    else {
        R_LUA_DIE(L, "Node child index %d out of bounds [1, %d]",
                  index, self->mesh.count);
    }
END

METHOD <NEW>R_Mesh *mesh(int index)
    if (index > 0 && index <= self->mesh.count) {
        RETVAL = R_mesh_incref(self->mesh.values[index - 1]);
    }
    else {
        R_LUA_DIE(L, "Node mesh index %d out of bounds [1, %d]",
                  index, self->mesh.count);
    }
END


PPTYPE R_Model R.Model

CONSTRUCTOR from_file(const char *path) = R_model_from_file

DESTRUCTOR = R_model_decref

INDEXFIELD int refs
INDEXFIELD int mesh_count = mesh.count

INDEX <NEW>R_Node *root_node
    RETVAL = R_node_incref(self->root_node);
END

METHOD <NEW>R_Mesh *mesh(int index)
    if (index > 0 && index <= self->mesh.count) {
        RETVAL = R_mesh_incref(self->mesh.values[index - 1]);
    }
    else {
        R_LUA_DIE(L, "Model mesh index %d out of bounds [1, %d]",
                  index, self->mesh.count);
    }
END

METHOD const char *dump()
    char *s = R_model_dump(self);
    RETVAL = s;
LEAVE
    free(s);
END


INIT extern R_lua_model_init
