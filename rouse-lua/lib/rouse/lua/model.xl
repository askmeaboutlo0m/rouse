/*
 * Copyright (c) 2021 - 2022 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

@xl

UTYPE R_V3
UTYPE R_Qn
UTYPE R_M4


PPTYPE R_Attribute R.Attribute

DESTRUCTOR
    R_model_decref(R_attribute_model(self));
END

INDEX <NEW>R_Model *model
    RETVAL = R_model_incref(R_attribute_model(self));
END

INDEX const char *name   = R_attribute_name
INDEX int        count   = R_attribute_count
INDEX int        divisor = R_attribute_divisor

INDEX lua_Integer type
    RETVAL = (lua_Integer) R_attribute_type(self);
END

INDEX const char *type_name
    switch (R_attribute_type(self)) {
        case R_ATTRIBUTE_TYPE_USHORT:
            RETVAL = "ushort";
            break;
        case R_ATTRIBUTE_TYPE_FLOAT:
            RETVAL = "float";
            break;
        default:
            RETVAL = "unknown";
            break;
    }
END

METHOD void gl_buffer_data(unsigned int target)
    int argc = lua_gettop(L);
    unsigned int usage = argc < 3 ? GL_STATIC_DRAW : XL_checkuint(L, 3);
    R_attribute_gl_buffer_data(self, target, usage);
END

METHOD void gl_vertex_attrib_pointer(unsigned int index)
    int argc       = lua_gettop(L);
    int normalized = argc >= 3 && XL_checkbool(L, 3);
    int stride     = argc < 4 ? 0 : XL_checkint(L, 4);
    R_attribute_gl_vertex_attrib_pointer(
        self, index, normalized ? GL_TRUE : GL_FALSE, stride, NULL);
END


PPTYPE R_Bone

DESTRUCTOR
    R_model_decref(R_bone_model(self));
END

INDEX const char *name       = R_bone_name
INDEX R_M4       offset      = R_bone_offset
INDEX int        armature_id = R_bone_armature_id
INDEX int        node_id     = R_bone_node_id

INDEX <NEW>R_Node *armature
    RETVAL = R_bone_armature(self);
    if (RETVAL) {
        R_model_incref(R_bone_model(self));
    }
    else {
        lua_pushnil(L);
        return 1;
    }
END

INDEX <NEW>R_Node *node
    RETVAL = R_bone_node(self);
    if (RETVAL) {
        R_model_incref(R_bone_model(self));
    }
    else {
        lua_pushnil(L);
        return 1;
    }
END


PPTYPE R_Mesh

DESTRUCTOR
    R_model_decref(R_mesh_model(self));
END

INDEX <NEW>R_Model *model
    RETVAL = R_model_incref(R_mesh_model(self));
END

INDEX int id              = R_mesh_id
INDEX int attribute_count = R_mesh_attribute_count
INDEX int bone_count      = R_mesh_bone_count

METHOD <NEW>R_Attribute *attribute()
    int type = lua_type(L, 2);
    int index;
    if (type == LUA_TNUMBER) {
        int i     = XL_checkint(L, 2);
        int count = R_mesh_attribute_count(self);
        if (i < 1 || i > count) {
            R_LUA_DIE(L, "Attribute index %d out of bounds [1, %d]", i, count);
        }
        index = i - 1;
    }
    else if (type == LUA_TSTRING) {
        const char *name = lua_tostring(L, 2);
        index = R_mesh_attribute_index_by_name(self, name);
        if (index == -1) {
            R_LUA_DIE(L, "Attribute with name '%s' not found", name);
        }
    }
    else {
        R_LUA_DIE(L, "Can't get a attribute by a %s", lua_typename(L, type));
    }
    RETVAL = R_mesh_attribute_at(self, index);
    R_model_incref(R_attribute_model(RETVAL));
END

METHOD <NEW>R_Bone *bone(int index)
    int count = R_mesh_bone_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_mesh_bone_at(self, index - 1);
        R_model_incref(R_bone_model(RETVAL));
    }
    else {
        R_LUA_DIE(L, "Mesh bone index %d out of bounds [1, %d]", index, count);
    }
END


PPTYPE R_Node

DESTRUCTOR
    R_model_decref(R_node_model(self));
END

INDEX <NEW>R_Model *model
    RETVAL = R_model_incref(R_node_model(self));
END

INDEX int        id           = R_node_id
INDEX const char *name        = R_node_name
INDEX R_V3       position     = R_node_position
INDEX R_Qn       rotation     = R_node_rotation
INDEX R_V3       scaling      = R_node_scaling
INDEX R_M4       transform    = R_node_transform
INDEX bool       child_meshes = R_node_child_meshes
INDEX int        mesh_count   = R_node_mesh_count
INDEX int        child_count  = R_node_child_count

METHOD int mesh_id(int index)
    int count = R_node_mesh_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_node_mesh_id_at(self, index - 1);
    }
    else {
        R_LUA_DIE(L, "Node mesh index %d out of bounds [1, %d]", index, count);
    }
END

METHOD <NEW>R_Mesh *mesh(int index)
    int count = R_node_mesh_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_node_mesh_at(self, index - 1);
        R_model_incref(R_mesh_model(RETVAL));
    }
    else {
        R_LUA_DIE(L, "Node mesh index %d out of bounds [1, %d]", index, count);
    }
END

METHOD int child_id(int index)
    int count = R_node_child_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_node_child_id_at(self, index - 1);
    }
    else {
        R_LUA_DIE(L, "Node child index %d out of bounds [1, %d]", index, count);
    }
END

METHOD <NEW>R_Node *child(int index)
    int count = R_node_child_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_node_child_at(self, index - 1);
        R_model_incref(R_node_model(RETVAL));
    }
    else {
        R_LUA_DIE(L, "Node child index %d out of bounds [1, %d]", index, count);
    }
END


PPTYPE R_Model R.Model

CONSTRUCTOR from_file(const char *path) = R_model_from_file

DESTRUCTOR = R_model_decref

INDEX int refs            = R_model_refs
INDEX int id              = R_model_id
INDEX int mesh_count      = R_model_mesh_count
INDEX int node_count      = R_model_node_count
INDEX int animation_count = R_model_animation_count

METHOD <NEW>R_Mesh *mesh(int index)
    int count = R_model_mesh_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_model_mesh_by_id(self, index - 1);
        R_model_incref(R_mesh_model(RETVAL));
    }
    else {
        R_LUA_DIE(L, "Model mesh index %d out of bounds [1, %d]",
                  index, count);
    }
END

METHOD <NEW>R_Node *node(int index)
    int count = R_model_node_count(self);
    if (index > 0 && index <= count) {
        RETVAL = R_model_node_by_id(self, index - 1);
        R_model_incref(R_node_model(RETVAL));
    }
    else {
        R_LUA_DIE(L, "Model node index %d out of bounds [1, %d]",
                  index, count);
    }
END

INDEX <NEW>R_Node *root_node
    RETVAL = R_model_root_node(self);
    R_model_incref(R_node_model(RETVAL));
END


INIT extern R_lua_model_init
