/*
 * Copyright (c) 2019 askmeaboutloom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#include <rouse.h>
#include "lua_inc.h"
#include "intern.h"
#include "util.h"

@xl

UTYPE R_V2


STATICINDEX uint32_t SDL.ticks = SDL_GetTicks

STATICINDEX uint32_t SDL.window_flags
    RETVAL = SDL_GetWindowFlags(R_window);
END


FUNCTION void SDL.set_windowed()
    XL_UNUSED(L);
    SDL_SetWindowFullscreen(R_window, 0);
END

FUNCTION void SDL.set_fullscreen()
    XL_UNUSED(L);
    SDL_SetWindowFullscreen(R_window, SDL_WINDOW_FULLSCREEN);
END

FUNCTION void SDL.set_fullscreen_desktop()
    XL_UNUSED(L);
    SDL_SetWindowFullscreen(R_window, SDL_WINDOW_FULLSCREEN_DESKTOP);
END


@c
#define ANY_FULLSCREEN \
    (SDL_WINDOW_FULLSCREEN | SDL_WINDOW_FULLSCREEN_DESKTOP)

static void toggle_window(uint32_t flags)
{
    bool is_fullscreen = SDL_GetWindowFlags(R_window) & ANY_FULLSCREEN;
    SDL_SetWindowFullscreen(R_window, is_fullscreen ? 0 : flags);
}
@xl

FUNCTION void SDL.toggle_fullscreen()
    XL_UNUSED(L);
    toggle_window(SDL_WINDOW_FULLSCREEN);
END

FUNCTION void SDL.toggle_fullscreen_desktop()
    XL_UNUSED(L);
    toggle_window(SDL_WINDOW_FULLSCREEN_DESKTOP);
END


STATICINDEX int SDL.gl_swap_interval = SDL_GL_GetSwapInterval

STATICNEWINDEX int SDL.gl_swap_interval
    if (SDL_GL_SetSwapInterval(VALUE) != 0) {
        R_LUA_DIE(L, "Can't set GL swap interval to %d: %s",
                  VALUE, SDL_GetError());
    }
END


STATICINDEX const char *SDL.clipboard_text
    if (SDL_HasClipboardText()) {
        RETVAL = SDL_GetClipboardText();
        if (!RETVAL) {
            R_LUA_DIE(L, "Can't get clipboard text: %s", SDL_GetError());
        }
    }
    else {
        RETVAL = NULL;
    }
END

STATICNEWINDEX const char *SDL.clipboard_text
    if (SDL_SetClipboardText(VALUE) != 0) {
        R_LUA_DIE(L, "Can't set clipboard text: %s", SDL_GetError());
    }
END


STATICINDEX R_V2 SDL.mouse_pos
    int x, y;
    SDL_GetMouseState(&x, &y);
    RETVAL = R_v2(R_int2float(x), R_int2float(y));
END

STATICINDEX int SDL.mouse_x
    SDL_GetMouseState(&RETVAL, NULL);
END

STATICINDEX int SDL.mouse_y
    SDL_GetMouseState(&RETVAL, NULL);
END


STATICINDEX bool SDL.text_input_active
    RETVAL = SDL_IsTextInputActive();
END

STATICNEWINDEX bool SDL.text_input_active
    if (VALUE) {
        SDL_StartTextInput();
    }
    else {
        SDL_StopTextInput();
    }
END


UTYPE SDL_WindowEvent

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp
INDEXFIELD uint32_t window_id = windowID
INDEXFIELD uint8_t  event
INDEXFIELD int32_t  data1
INDEXFIELD int32_t  data2


UTYPE SDL_KeyboardEvent

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp
INDEXFIELD uint32_t window_id = windowID
INDEXFIELD uint8_t  state
INDEXFIELD uint8_t  repeat

INDEX lua_Integer scancode
    RETVAL = (lua_Integer) self->keysym.scancode;
END

INDEX lua_Integer sym
    RETVAL = (lua_Integer) self->keysym.sym;
END

INDEX lua_Integer mod
    RETVAL = (lua_Integer) self->keysym.mod;
END

INDEX bool pressed
    RETVAL = self->state == SDL_PRESSED;
END

INDEX bool released
    RETVAL = self->state == SDL_RELEASED;
END


UTYPE SDL_MouseMotionEvent

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp
INDEXFIELD uint32_t window_id = windowID
INDEXFIELD uint32_t which
INDEXFIELD uint32_t state
INDEXFIELD int32_t  x
INDEXFIELD int32_t  y
INDEXFIELD int32_t  xrel
INDEXFIELD int32_t  yrel

INDEX bool left_button
    RETVAL = self->state | SDL_BUTTON_LMASK;
END

INDEX bool middle_button
    RETVAL = self->state | SDL_BUTTON_MMASK;
END

INDEX bool right_button
    RETVAL = self->state | SDL_BUTTON_RMASK;
END

INDEX bool x1_button
    RETVAL = self->state | SDL_BUTTON_X1MASK;
END

INDEX bool x2_button
    RETVAL = self->state | SDL_BUTTON_X2MASK;
END


UTYPE SDL_MouseButtonEvent

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp
INDEXFIELD uint32_t window_id = windowID
INDEXFIELD uint32_t which
INDEXFIELD uint8_t  button
INDEXFIELD uint8_t  state
INDEXFIELD int32_t  x
INDEXFIELD int32_t  y

INDEX bool pressed
    RETVAL = self->state == SDL_PRESSED;
END

INDEX bool released
    RETVAL = self->state == SDL_RELEASED;
END

INDEX bool left_button
    RETVAL = self->button == SDL_BUTTON_LEFT;
END

INDEX bool middle_button
    RETVAL = self->button == SDL_BUTTON_MIDDLE;
END

INDEX bool right_button
    RETVAL = self->button == SDL_BUTTON_RIGHT;
END

INDEX bool x1_button
    RETVAL = self->button == SDL_BUTTON_X1;
END

INDEX bool x2_button
    RETVAL = self->button == SDL_BUTTON_X2;
END


UTYPE SDL_MouseWheelEvent

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp
INDEXFIELD uint32_t window_id = windowID
INDEXFIELD uint32_t which
INDEXFIELD int32_t  x
INDEXFIELD int32_t  y
INDEXFIELD uint32_t direction

INDEX bool is_normal
    RETVAL = self->direction == SDL_MOUSEWHEEL_NORMAL;
END

INDEX bool is_flipped
    RETVAL = self->direction == SDL_MOUSEWHEEL_FLIPPED;
END

INDEX int32_t effective_x
    int32_t x = self->x;
    RETVAL    = self->direction == SDL_MOUSEWHEEL_FLIPPED ? -x : x;
END

INDEX int32_t effective_y
    int32_t y = self->y;
    RETVAL    = self->direction == SDL_MOUSEWHEEL_FLIPPED ? -y : y;
END


UTYPE SDL_TextInputEvent

INDEXFIELD uint32_t   type
INDEXFIELD uint32_t   timestamp
INDEXFIELD uint32_t   window_id = windowID
INDEXFIELD const char *text


UTYPE SDL_Event SDL.Event

INDEXFIELD uint32_t type
INDEXFIELD uint32_t timestamp = common.timestamp

@c

static bool is_allowed_event_type(uint32_t type, int len,
                                  const uint32_t allowed[static len])
{
    for (int i = 0; i < len; ++i) {
        if (type == allowed[i]) {
            return true;
        }
    }
    return false;
}



static void error_on_event_type(lua_State *L, const char *field,
                                uint32_t type) R_NORETURN;

static void error_on_event_type(lua_State *L, const char *field,
                                uint32_t type)
{
    luaL_error(L, "Can't access %s event data on event of type %d",
               field, (int) type);
    R_UNREACHABLE();
}

#define GET_IN_EVENT_UNION(FIELD, ...) \
    static const uint32_t allowed[] = {__VA_ARGS__}; \
    uint32_t type = self->type; \
    if (is_allowed_event_type(type, R_size2int(R_LENGTH(allowed)), allowed)) { \
        RETVAL = self->FIELD; \
    } \
    else { \
        error_on_event_type(L, #FIELD, type); \
    }

@xl

INDEX <NEW>SDL_WindowEvent *window
    GET_IN_EVENT_UNION(window, SDL_WINDOWEVENT);
END

INDEX <NEW>SDL_KeyboardEvent *key
    GET_IN_EVENT_UNION(key, SDL_KEYDOWN, SDL_KEYUP);
END

INDEX <NEW>SDL_MouseMotionEvent *motion
    GET_IN_EVENT_UNION(motion, SDL_MOUSEMOTION);
END

INDEX <NEW>SDL_MouseButtonEvent *button
    GET_IN_EVENT_UNION(button, SDL_MOUSEBUTTONDOWN, SDL_MOUSEBUTTONUP);
END

INDEX <NEW>SDL_MouseWheelEvent *wheel
    GET_IN_EVENT_UNION(wheel, SDL_MOUSEWHEEL);
END

INDEX <NEW>SDL_TextInputEvent *text
    GET_IN_EVENT_UNION(text, SDL_TEXTINPUT);
END

INDEX ... inner_event
#   define PUSH_EVENT(FIELD, TYPE) do { \
            TYPE *inner = &self->FIELD; \
            XL_pushnewutypeuv(L, inner, sizeof(*inner), #TYPE, 0); \
        } while (0)
    uint32_t type = self->type;
    switch (type) {
        case SDL_WINDOWEVENT:
            PUSH_EVENT(window, SDL_WindowEvent);
            break;
        case SDL_KEYDOWN:
        case SDL_KEYUP:
            PUSH_EVENT(key, SDL_KeyboardEvent);
            break;
        case SDL_MOUSEMOTION:
            PUSH_EVENT(motion, SDL_MouseMotionEvent);
            break;
        case SDL_MOUSEBUTTONDOWN:
        case SDL_MOUSEBUTTONUP:
            PUSH_EVENT(button, SDL_MouseButtonEvent);
            break;
        case SDL_MOUSEWHEEL:
            PUSH_EVENT(wheel, SDL_MouseWheelEvent);
            break;
        case SDL_TEXTINPUT:
            PUSH_EVENT(text, SDL_TextInputEvent);
            break;
        default:
            R_warn("Don't know which inner_event belongs to SDL event type %u",
                   (unsigned int) type);
            lua_pushnil(L);
            break;
    }
#   undef PUSH_EVENT
    return 1;
END

ENUM SDL.Window s/^SDL_WINDOW_//
    SDL_WINDOW_FULLSCREEN
    SDL_WINDOW_OPENGL
    SDL_WINDOW_SHOWN
    SDL_WINDOW_HIDDEN
    SDL_WINDOW_BORDERLESS
    SDL_WINDOW_RESIZABLE
    SDL_WINDOW_MINIMIZED
    SDL_WINDOW_MAXIMIZED
    SDL_WINDOW_INPUT_GRABBED
    SDL_WINDOW_INPUT_FOCUS
    SDL_WINDOW_MOUSE_FOCUS
    SDL_WINDOW_FULLSCREEN_DESKTOP
    SDL_WINDOW_FOREIGN
    SDL_WINDOW_ALLOW_HIGHDPI
    SDL_WINDOW_MOUSE_CAPTURE
    SDL_WINDOW_ALWAYS_ON_TOP
    SDL_WINDOW_SKIP_TASKBAR
    SDL_WINDOW_UTILITY
    SDL_WINDOW_TOOLTIP
    SDL_WINDOW_POPUP_MENU
    SDL_WINDOW_VULKAN
END

ENUM SDL.EventType s/^SDL_//
    SDL_QUIT
    SDL_APP_TERMINATING
    SDL_APP_LOWMEMORY
    SDL_APP_WILLENTERBACKGROUND
    SDL_APP_DIDENTERBACKGROUND
    SDL_APP_WILLENTERFOREGROUND
    SDL_APP_DIDENTERFOREGROUND
    SDL_DISPLAYEVENT
    SDL_WINDOWEVENT
    SDL_SYSWMEVENT
    SDL_KEYDOWN
    SDL_KEYUP
    SDL_TEXTEDITING
    SDL_TEXTINPUT
    SDL_KEYMAPCHANGED
    SDL_MOUSEMOTION
    SDL_MOUSEBUTTONDOWN
    SDL_MOUSEBUTTONUP
    SDL_MOUSEWHEEL
    SDL_JOYAXISMOTION
    SDL_JOYBALLMOTION
    SDL_JOYHATMOTION
    SDL_JOYBUTTONDOWN
    SDL_JOYBUTTONUP
    SDL_JOYDEVICEADDED
    SDL_JOYDEVICEREMOVED
    SDL_CONTROLLERAXISMOTION
    SDL_CONTROLLERBUTTONDOWN
    SDL_CONTROLLERBUTTONUP
    SDL_CONTROLLERDEVICEADDED
    SDL_CONTROLLERDEVICEREMOVED
    SDL_CONTROLLERDEVICEREMAPPED
    SDL_FINGERDOWN
    SDL_FINGERUP
    SDL_FINGERMOTION
    SDL_DOLLARGESTURE
    SDL_DOLLARRECORD
    SDL_MULTIGESTURE
    SDL_CLIPBOARDUPDATE
    SDL_DROPFILE
    SDL_DROPTEXT
    SDL_DROPBEGIN
    SDL_DROPCOMPLETE
    SDL_AUDIODEVICEADDED
    SDL_AUDIODEVICEREMOVED
    SDL_SENSORUPDATE
    SDL_RENDER_TARGETS_RESET
    SDL_RENDER_DEVICE_RESET
    SDL_USEREVENT
END

ENUM SDL.WindowEventType s/^SDL_WINDOWEVENT_//
    SDL_WINDOWEVENT_SHOWN
    SDL_WINDOWEVENT_HIDDEN
    SDL_WINDOWEVENT_EXPOSED
    SDL_WINDOWEVENT_MOVED
    SDL_WINDOWEVENT_RESIZED
    SDL_WINDOWEVENT_SIZE_CHANGED
    SDL_WINDOWEVENT_MINIMIZED
    SDL_WINDOWEVENT_MAXIMIZED
    SDL_WINDOWEVENT_RESTORED
    SDL_WINDOWEVENT_ENTER
    SDL_WINDOWEVENT_LEAVE
    SDL_WINDOWEVENT_FOCUS_GAINED
    SDL_WINDOWEVENT_FOCUS_LOST
    SDL_WINDOWEVENT_CLOSE
    SDL_WINDOWEVENT_TAKE_FOCUS
    SDL_WINDOWEVENT_HIT_TEST
END

ENUM SDL.KeyboardEvent.State s/^SDL_//
    SDL_PRESSED
    SDL_RELEASED
END

ENUM SDL.Scancode s/^SDL_SCANCODE_//
    SDL_SCANCODE_UNKNOWN
    SDL_SCANCODE_A
    SDL_SCANCODE_B
    SDL_SCANCODE_C
    SDL_SCANCODE_D
    SDL_SCANCODE_E
    SDL_SCANCODE_F
    SDL_SCANCODE_G
    SDL_SCANCODE_H
    SDL_SCANCODE_I
    SDL_SCANCODE_J
    SDL_SCANCODE_K
    SDL_SCANCODE_L
    SDL_SCANCODE_M
    SDL_SCANCODE_N
    SDL_SCANCODE_O
    SDL_SCANCODE_P
    SDL_SCANCODE_Q
    SDL_SCANCODE_R
    SDL_SCANCODE_S
    SDL_SCANCODE_T
    SDL_SCANCODE_U
    SDL_SCANCODE_V
    SDL_SCANCODE_W
    SDL_SCANCODE_X
    SDL_SCANCODE_Y
    SDL_SCANCODE_Z
    SDL_SCANCODE_1
    SDL_SCANCODE_2
    SDL_SCANCODE_3
    SDL_SCANCODE_4
    SDL_SCANCODE_5
    SDL_SCANCODE_6
    SDL_SCANCODE_7
    SDL_SCANCODE_8
    SDL_SCANCODE_9
    SDL_SCANCODE_0
    SDL_SCANCODE_RETURN
    SDL_SCANCODE_ESCAPE
    SDL_SCANCODE_BACKSPACE
    SDL_SCANCODE_TAB
    SDL_SCANCODE_SPACE
    SDL_SCANCODE_MINUS
    SDL_SCANCODE_EQUALS
    SDL_SCANCODE_LEFTBRACKET
    SDL_SCANCODE_RIGHTBRACKET
    SDL_SCANCODE_BACKSLASH
    SDL_SCANCODE_NONUSHASH
    SDL_SCANCODE_SEMICOLON
    SDL_SCANCODE_APOSTROPHE
    SDL_SCANCODE_GRAVE
    SDL_SCANCODE_COMMA
    SDL_SCANCODE_PERIOD
    SDL_SCANCODE_SLASH
    SDL_SCANCODE_CAPSLOCK
    SDL_SCANCODE_F1
    SDL_SCANCODE_F2
    SDL_SCANCODE_F3
    SDL_SCANCODE_F4
    SDL_SCANCODE_F5
    SDL_SCANCODE_F6
    SDL_SCANCODE_F7
    SDL_SCANCODE_F8
    SDL_SCANCODE_F9
    SDL_SCANCODE_F10
    SDL_SCANCODE_F11
    SDL_SCANCODE_F12
    SDL_SCANCODE_PRINTSCREEN
    SDL_SCANCODE_SCROLLLOCK
    SDL_SCANCODE_PAUSE
    SDL_SCANCODE_INSERT
    SDL_SCANCODE_HOME
    SDL_SCANCODE_PAGEUP
    SDL_SCANCODE_DELETE
    SDL_SCANCODE_END
    SDL_SCANCODE_PAGEDOWN
    SDL_SCANCODE_RIGHT
    SDL_SCANCODE_LEFT
    SDL_SCANCODE_DOWN
    SDL_SCANCODE_UP
    SDL_SCANCODE_NUMLOCKCLEAR
    SDL_SCANCODE_KP_DIVIDE
    SDL_SCANCODE_KP_MULTIPLY
    SDL_SCANCODE_KP_MINUS
    SDL_SCANCODE_KP_PLUS
    SDL_SCANCODE_KP_ENTER
    SDL_SCANCODE_KP_1
    SDL_SCANCODE_KP_2
    SDL_SCANCODE_KP_3
    SDL_SCANCODE_KP_4
    SDL_SCANCODE_KP_5
    SDL_SCANCODE_KP_6
    SDL_SCANCODE_KP_7
    SDL_SCANCODE_KP_8
    SDL_SCANCODE_KP_9
    SDL_SCANCODE_KP_0
    SDL_SCANCODE_KP_PERIOD
    SDL_SCANCODE_NONUSBACKSLASH
    SDL_SCANCODE_APPLICATION
    SDL_SCANCODE_POWER
    SDL_SCANCODE_KP_EQUALS
    SDL_SCANCODE_F13
    SDL_SCANCODE_F14
    SDL_SCANCODE_F15
    SDL_SCANCODE_F16
    SDL_SCANCODE_F17
    SDL_SCANCODE_F18
    SDL_SCANCODE_F19
    SDL_SCANCODE_F20
    SDL_SCANCODE_F21
    SDL_SCANCODE_F22
    SDL_SCANCODE_F23
    SDL_SCANCODE_F24
    SDL_SCANCODE_EXECUTE
    SDL_SCANCODE_HELP
    SDL_SCANCODE_MENU
    SDL_SCANCODE_SELECT
    SDL_SCANCODE_STOP
    SDL_SCANCODE_AGAIN
    SDL_SCANCODE_UNDO
    SDL_SCANCODE_CUT
    SDL_SCANCODE_COPY
    SDL_SCANCODE_PASTE
    SDL_SCANCODE_FIND
    SDL_SCANCODE_MUTE
    SDL_SCANCODE_VOLUMEUP
    SDL_SCANCODE_VOLUMEDOWN
    SDL_SCANCODE_KP_COMMA
    SDL_SCANCODE_KP_EQUALSAS400
    SDL_SCANCODE_INTERNATIONAL1
    SDL_SCANCODE_INTERNATIONAL2
    SDL_SCANCODE_INTERNATIONAL3
    SDL_SCANCODE_INTERNATIONAL4
    SDL_SCANCODE_INTERNATIONAL5
    SDL_SCANCODE_INTERNATIONAL6
    SDL_SCANCODE_INTERNATIONAL7
    SDL_SCANCODE_INTERNATIONAL8
    SDL_SCANCODE_INTERNATIONAL9
    SDL_SCANCODE_LANG1
    SDL_SCANCODE_LANG2
    SDL_SCANCODE_LANG3
    SDL_SCANCODE_LANG4
    SDL_SCANCODE_LANG5
    SDL_SCANCODE_LANG6
    SDL_SCANCODE_LANG7
    SDL_SCANCODE_LANG8
    SDL_SCANCODE_LANG9
    SDL_SCANCODE_ALTERASE
    SDL_SCANCODE_SYSREQ
    SDL_SCANCODE_CANCEL
    SDL_SCANCODE_CLEAR
    SDL_SCANCODE_PRIOR
    SDL_SCANCODE_RETURN2
    SDL_SCANCODE_SEPARATOR
    SDL_SCANCODE_OUT
    SDL_SCANCODE_OPER
    SDL_SCANCODE_CLEARAGAIN
    SDL_SCANCODE_CRSEL
    SDL_SCANCODE_EXSEL
    SDL_SCANCODE_KP_00
    SDL_SCANCODE_KP_000
    SDL_SCANCODE_THOUSANDSSEPARATOR
    SDL_SCANCODE_DECIMALSEPARATOR
    SDL_SCANCODE_CURRENCYUNIT
    SDL_SCANCODE_CURRENCYSUBUNIT
    SDL_SCANCODE_KP_LEFTPAREN
    SDL_SCANCODE_KP_RIGHTPAREN
    SDL_SCANCODE_KP_LEFTBRACE
    SDL_SCANCODE_KP_RIGHTBRACE
    SDL_SCANCODE_KP_TAB
    SDL_SCANCODE_KP_BACKSPACE
    SDL_SCANCODE_KP_A
    SDL_SCANCODE_KP_B
    SDL_SCANCODE_KP_C
    SDL_SCANCODE_KP_D
    SDL_SCANCODE_KP_E
    SDL_SCANCODE_KP_F
    SDL_SCANCODE_KP_XOR
    SDL_SCANCODE_KP_POWER
    SDL_SCANCODE_KP_PERCENT
    SDL_SCANCODE_KP_LESS
    SDL_SCANCODE_KP_GREATER
    SDL_SCANCODE_KP_AMPERSAND
    SDL_SCANCODE_KP_DBLAMPERSAND
    SDL_SCANCODE_KP_VERTICALBAR
    SDL_SCANCODE_KP_DBLVERTICALBAR
    SDL_SCANCODE_KP_COLON
    SDL_SCANCODE_KP_HASH
    SDL_SCANCODE_KP_SPACE
    SDL_SCANCODE_KP_AT
    SDL_SCANCODE_KP_EXCLAM
    SDL_SCANCODE_KP_MEMSTORE
    SDL_SCANCODE_KP_MEMRECALL
    SDL_SCANCODE_KP_MEMCLEAR
    SDL_SCANCODE_KP_MEMADD
    SDL_SCANCODE_KP_MEMSUBTRACT
    SDL_SCANCODE_KP_MEMMULTIPLY
    SDL_SCANCODE_KP_MEMDIVIDE
    SDL_SCANCODE_KP_PLUSMINUS
    SDL_SCANCODE_KP_CLEAR
    SDL_SCANCODE_KP_CLEARENTRY
    SDL_SCANCODE_KP_BINARY
    SDL_SCANCODE_KP_OCTAL
    SDL_SCANCODE_KP_DECIMAL
    SDL_SCANCODE_KP_HEXADECIMAL
    SDL_SCANCODE_LCTRL
    SDL_SCANCODE_LSHIFT
    SDL_SCANCODE_LALT
    SDL_SCANCODE_LGUI
    SDL_SCANCODE_RCTRL
    SDL_SCANCODE_RSHIFT
    SDL_SCANCODE_RALT
    SDL_SCANCODE_RGUI
    SDL_SCANCODE_MODE
    SDL_SCANCODE_AUDIONEXT
    SDL_SCANCODE_AUDIOPREV
    SDL_SCANCODE_AUDIOSTOP
    SDL_SCANCODE_AUDIOPLAY
    SDL_SCANCODE_AUDIOMUTE
    SDL_SCANCODE_MEDIASELECT
    SDL_SCANCODE_WWW
    SDL_SCANCODE_MAIL
    SDL_SCANCODE_CALCULATOR
    SDL_SCANCODE_COMPUTER
    SDL_SCANCODE_AC_SEARCH
    SDL_SCANCODE_AC_HOME
    SDL_SCANCODE_AC_BACK
    SDL_SCANCODE_AC_FORWARD
    SDL_SCANCODE_AC_STOP
    SDL_SCANCODE_AC_REFRESH
    SDL_SCANCODE_AC_BOOKMARKS
    SDL_SCANCODE_BRIGHTNESSDOWN
    SDL_SCANCODE_BRIGHTNESSUP
    SDL_SCANCODE_DISPLAYSWITCH
    SDL_SCANCODE_KBDILLUMTOGGLE
    SDL_SCANCODE_KBDILLUMDOWN
    SDL_SCANCODE_KBDILLUMUP
    SDL_SCANCODE_EJECT
    SDL_SCANCODE_SLEEP
    SDL_SCANCODE_APP1
    SDL_SCANCODE_APP2
    SDL_SCANCODE_AUDIOREWIND
    SDL_SCANCODE_AUDIOFASTFORWARD
END

ENUM SDL.Keycode s/SDLK_//
    SDLK_UNKNOWN
    SDLK_RETURN
    SDLK_ESCAPE
    SDLK_BACKSPACE
    SDLK_TAB
    SDLK_SPACE
    SDLK_EXCLAIM
    SDLK_QUOTEDBL
    SDLK_HASH
    SDLK_PERCENT
    SDLK_DOLLAR
    SDLK_AMPERSAND
    SDLK_QUOTE
    SDLK_LEFTPAREN
    SDLK_RIGHTPAREN
    SDLK_ASTERISK
    SDLK_PLUS
    SDLK_COMMA
    SDLK_MINUS
    SDLK_PERIOD
    SDLK_SLASH
    SDLK_0
    SDLK_1
    SDLK_2
    SDLK_3
    SDLK_4
    SDLK_5
    SDLK_6
    SDLK_7
    SDLK_8
    SDLK_9
    SDLK_COLON
    SDLK_SEMICOLON
    SDLK_LESS
    SDLK_EQUALS
    SDLK_GREATER
    SDLK_QUESTION
    SDLK_AT
    SDLK_LEFTBRACKET
    SDLK_BACKSLASH
    SDLK_RIGHTBRACKET
    SDLK_CARET
    SDLK_UNDERSCORE
    SDLK_BACKQUOTE
    SDLK_a
    SDLK_b
    SDLK_c
    SDLK_d
    SDLK_e
    SDLK_f
    SDLK_g
    SDLK_h
    SDLK_i
    SDLK_j
    SDLK_k
    SDLK_l
    SDLK_m
    SDLK_n
    SDLK_o
    SDLK_p
    SDLK_q
    SDLK_r
    SDLK_s
    SDLK_t
    SDLK_u
    SDLK_v
    SDLK_w
    SDLK_x
    SDLK_y
    SDLK_z
    SDLK_CAPSLOCK
    SDLK_F1
    SDLK_F2
    SDLK_F3
    SDLK_F4
    SDLK_F5
    SDLK_F6
    SDLK_F7
    SDLK_F8
    SDLK_F9
    SDLK_F10
    SDLK_F11
    SDLK_F12
    SDLK_PRINTSCREEN
    SDLK_SCROLLLOCK
    SDLK_PAUSE
    SDLK_INSERT
    SDLK_HOME
    SDLK_PAGEUP
    SDLK_DELETE
    SDLK_END
    SDLK_PAGEDOWN
    SDLK_RIGHT
    SDLK_LEFT
    SDLK_DOWN
    SDLK_UP
    SDLK_NUMLOCKCLEAR
    SDLK_KP_DIVIDE
    SDLK_KP_MULTIPLY
    SDLK_KP_MINUS
    SDLK_KP_PLUS
    SDLK_KP_ENTER
    SDLK_KP_1
    SDLK_KP_2
    SDLK_KP_3
    SDLK_KP_4
    SDLK_KP_5
    SDLK_KP_6
    SDLK_KP_7
    SDLK_KP_8
    SDLK_KP_9
    SDLK_KP_0
    SDLK_KP_PERIOD
    SDLK_APPLICATION
    SDLK_POWER
    SDLK_KP_EQUALS
    SDLK_F13
    SDLK_F14
    SDLK_F15
    SDLK_F16
    SDLK_F17
    SDLK_F18
    SDLK_F19
    SDLK_F20
    SDLK_F21
    SDLK_F22
    SDLK_F23
    SDLK_F24
    SDLK_EXECUTE
    SDLK_HELP
    SDLK_MENU
    SDLK_SELECT
    SDLK_STOP
    SDLK_AGAIN
    SDLK_UNDO
    SDLK_CUT
    SDLK_COPY
    SDLK_PASTE
    SDLK_FIND
    SDLK_MUTE
    SDLK_VOLUMEUP
    SDLK_VOLUMEDOWN
    SDLK_KP_COMMA
    SDLK_KP_EQUALSAS400
    SDLK_ALTERASE
    SDLK_SYSREQ
    SDLK_CANCEL
    SDLK_CLEAR
    SDLK_PRIOR
    SDLK_RETURN2
    SDLK_SEPARATOR
    SDLK_OUT
    SDLK_OPER
    SDLK_CLEARAGAIN
    SDLK_CRSEL
    SDLK_EXSEL
    SDLK_KP_00
    SDLK_KP_000
    SDLK_THOUSANDSSEPARATOR
    SDLK_DECIMALSEPARATOR
    SDLK_CURRENCYUNIT
    SDLK_CURRENCYSUBUNIT
    SDLK_KP_LEFTPAREN
    SDLK_KP_RIGHTPAREN
    SDLK_KP_LEFTBRACE
    SDLK_KP_RIGHTBRACE
    SDLK_KP_TAB
    SDLK_KP_BACKSPACE
    SDLK_KP_A
    SDLK_KP_B
    SDLK_KP_C
    SDLK_KP_D
    SDLK_KP_E
    SDLK_KP_F
    SDLK_KP_XOR
    SDLK_KP_POWER
    SDLK_KP_PERCENT
    SDLK_KP_LESS
    SDLK_KP_GREATER
    SDLK_KP_AMPERSAND
    SDLK_KP_DBLAMPERSAND
    SDLK_KP_VERTICALBAR
    SDLK_KP_DBLVERTICALBAR
    SDLK_KP_COLON
    SDLK_KP_HASH
    SDLK_KP_SPACE
    SDLK_KP_AT
    SDLK_KP_EXCLAM
    SDLK_KP_MEMSTORE
    SDLK_KP_MEMRECALL
    SDLK_KP_MEMCLEAR
    SDLK_KP_MEMADD
    SDLK_KP_MEMSUBTRACT
    SDLK_KP_MEMMULTIPLY
    SDLK_KP_MEMDIVIDE
    SDLK_KP_PLUSMINUS
    SDLK_KP_CLEAR
    SDLK_KP_CLEARENTRY
    SDLK_KP_BINARY
    SDLK_KP_OCTAL
    SDLK_KP_DECIMAL
    SDLK_KP_HEXADECIMAL
    SDLK_LCTRL
    SDLK_LSHIFT
    SDLK_LALT
    SDLK_LGUI
    SDLK_RCTRL
    SDLK_RSHIFT
    SDLK_RALT
    SDLK_RGUI
    SDLK_MODE
    SDLK_AUDIONEXT
    SDLK_AUDIOPREV
    SDLK_AUDIOSTOP
    SDLK_AUDIOPLAY
    SDLK_AUDIOMUTE
    SDLK_MEDIASELECT
    SDLK_WWW
    SDLK_MAIL
    SDLK_CALCULATOR
    SDLK_COMPUTER
    SDLK_AC_SEARCH
    SDLK_AC_HOME
    SDLK_AC_BACK
    SDLK_AC_FORWARD
    SDLK_AC_STOP
    SDLK_AC_REFRESH
    SDLK_AC_BOOKMARKS
    SDLK_BRIGHTNESSDOWN
    SDLK_BRIGHTNESSUP
    SDLK_DISPLAYSWITCH
    SDLK_KBDILLUMTOGGLE
    SDLK_KBDILLUMDOWN
    SDLK_KBDILLUMUP
    SDLK_EJECT
    SDLK_SLEEP
    SDLK_APP1
    SDLK_APP2
    SDLK_AUDIOREWIND
    SDLK_AUDIOFASTFORWARD
END

ENUM SDL.Keymod s/KMOD_//
    KMOD_NONE
    KMOD_LSHIFT
    KMOD_RSHIFT
    KMOD_LCTRL
    KMOD_RCTRL
    KMOD_LALT
    KMOD_RALT
    KMOD_LGUI
    KMOD_RGUI
    KMOD_NUM
    KMOD_CAPS
    KMOD_MODE
    KMOD_RESERVED
    KMOD_CTRL
    KMOD_SHIFT
    KMOD_ALT
    KMOD_GUI
END

ENUM SDL.Button s/SDL_BUTTON_//
    SDL_BUTTON_LEFT
    SDL_BUTTON_MIDDLE
    SDL_BUTTON_RIGHT
    SDL_BUTTON_X1
    SDL_BUTTON_X2
    SDL_BUTTON_LMASK
    SDL_BUTTON_MMASK
    SDL_BUTTON_RMASK
    SDL_BUTTON_X1MASK
    SDL_BUTTON_X2MASK
END

ENUM SDL.Touch s/SDL_TOUCH_//
    SDL_TOUCH_MOUSEID
END

ENUM SDL.MouseWheel s/SDL_MOUSEWHEEL_//
    SDL_MOUSEWHEEL_NORMAL
    SDL_MOUSEWHEEL_FLIPPED
END


ENUM SDL.SystemCursor s/SDL_SYSTEM_CURSOR_//
    SDL_SYSTEM_CURSOR_ARROW
    SDL_SYSTEM_CURSOR_IBEAM
    SDL_SYSTEM_CURSOR_WAIT
    SDL_SYSTEM_CURSOR_CROSSHAIR
    SDL_SYSTEM_CURSOR_WAITARROW
    SDL_SYSTEM_CURSOR_SIZENWSE
    SDL_SYSTEM_CURSOR_SIZENESW
    SDL_SYSTEM_CURSOR_SIZEWE
    SDL_SYSTEM_CURSOR_SIZENS
    SDL_SYSTEM_CURSOR_SIZEALL
    SDL_SYSTEM_CURSOR_NO
    SDL_SYSTEM_CURSOR_HAND
END

STATICINDEX bool SDL.cursor
    int result = SDL_ShowCursor(SDL_QUERY);
    if (result < 0) {
        R_warn("Can't get cursor visibility: %s", SDL_GetError());
    }
    RETVAL = result == SDL_ENABLE;
END

@c

static SDL_Cursor *get_system_cursor(lua_State *L, lua_Integer i)
{
    static SDL_Cursor *cursors[SDL_NUM_SYSTEM_CURSORS];
    if (i >= 0 && i < SDL_NUM_SYSTEM_CURSORS) {
        SDL_Cursor *cursor = cursors[i];
        if (!cursor) {
            cursor = cursors[i] = SDL_CreateSystemCursor((SDL_SystemCursor) i);
        }
        return cursor;
    }
    else {
        R_LUA_DIE(L, "Bad system cursor index: %d", i);
    }
}
@xl

STATICNEWINDEX any SDL.cursor
    if (lua_isboolean(L, VALUE)) {
        int show = lua_toboolean(L, VALUE) ? SDL_ENABLE : SDL_DISABLE;
        if (SDL_ShowCursor(show) < 0) {
            R_warn("Can't set cursor visibility: %s", SDL_GetError());
        }
    } else {
        SDL_Cursor *cursor = lua_isnil(L, VALUE)
                        ? SDL_GetDefaultCursor()
                        : get_system_cursor(L, luaL_checkinteger(L, VALUE));
        if (cursor) {
            SDL_SetCursor(cursor);
        }
    }
END


INIT extern R_lua_sdl_init
