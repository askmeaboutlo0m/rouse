#!/usr/bin/env perl
#
# generate-sources-list - collects source and header paths for CMake
#
# Copyright (c) 2019 askmeaboutloom
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
use strict;
use warnings;
use FindBin;
use File::Find;
use File::Basename qw(basename);
use File::Spec::Functions qw(abs2rel catdir);
use List::Util qw(uniqstr);

my $rootdir = $FindBin::Bin;
my $libdir  = catdir($rootdir, 'lib');

sub cmakeify {
    my ($path) = @_;
    return '${CMAKE_SOURCE_DIR}/' . abs2rel($path, $rootdir);
}

sub find_sources_and_headers {
    my @headers;
    my @sources;
    my $wanted = sub {
        return unless -f;
        if (/\.h\z/) {
            push @headers, cmakeify($_);
        }
        elsif (/\.c\z/) {
            push @sources, cmakeify($_);
        }
    };

    find({wanted => $wanted, no_chdir => 1}, @_);
    return (\@headers, \@sources);
}

sub generate_list {
    my ($name, @files) = @_;
    print "\nset($name\n";
    print join "\n", uniqstr sort map { qq/    "$_"/ } @files;
    print ")\n";
}

sub generate_sources_and_headers {
    my ($prefix, $dir, $post_process) = @_;
    my ($headers, $sources) = find_sources_and_headers($dir);

    if ($post_process) {
        ($headers, $sources) = $post_process->($headers, $sources);
    }

    $post_process->($headers, $sources) if $post_process;
    generate_list("${prefix}_headers", @$headers);
    generate_list("${prefix}_sources", @$sources);
}


sub is_nanovg_path {
    return shift =~ m{nanovg_gles2\.c|3rdparty/nanovg/};
}

sub is_parson_path {
    return shift =~ /parson\.[ch]/;
}

sub is_rouse_path {
    return !is_nanovg_path(@_) && !is_parson_path(@_);
}

sub filter_path_list {
    my ($predicate, $path_list) = @_;
    return [grep { $predicate->($_) } @$path_list];
}

sub filter_paths {
    my ($predicate, @path_lists) = @_;
    return map { filter_path_list($predicate, $_) } @path_lists;
}


print "# Automatically generated by ", basename(__FILE__), "\n";

generate_sources_and_headers('rouse', $libdir, sub {
    my ($headers, $sources) = @_;
    push @$headers, '${CMAKE_SOURCE_DIR}/lib/rouse/geom.h',
                    '${CMAKE_BINARY_DIR}/config/rouse_config.h';
    return filter_paths(\&is_rouse_path, $headers, $sources);
});

generate_sources_and_headers('parson', $libdir, sub {
    return filter_paths(\&is_parson_path, @_);
});

generate_sources_and_headers('nanovg', $libdir, sub {
    return filter_paths(\&is_nanovg_path, @_);
});
